// <auto-generated />
using System;
using Assignment.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment.Migrations.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230620065102_InitialSkillMigrations")]
    partial class InitialSkillMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("App");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cce7a1e-34ae-4f2b-ab0b-415519a8b908"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(3864),
                            Type = "CRM"
                        },
                        new
                        {
                            Id = new Guid("c6f9b020-bebf-4f5a-b880-201e12ab6b26"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(3871),
                            Type = "Cloud"
                        },
                        new
                        {
                            Id = new Guid("2fb2c391-0bc6-40a9-b85c-d5196864762e"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(3874),
                            Type = "Client Side Scripting"
                        },
                        new
                        {
                            Id = new Guid("5e7dcdbc-bdea-4805-b454-a8761823e1c9"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(3877),
                            Type = "Programming Language"
                        });
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationAccess")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Operation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperationAccess = "ADD,EDIT,VIEW,DELETE"
                        },
                        new
                        {
                            Id = 2,
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperationAccess = "ADD,VIEW"
                        });
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GUEST"
                        },
                        new
                        {
                            Id = 3,
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DEVELOPER"
                        },
                        new
                        {
                            Id = 4,
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MANAGER"
                        });
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Skill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1701dc57-ccb9-403e-bdc2-b3bc460c95ac"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4069),
                            CategoryId = new Guid("2fb2c391-0bc6-40a9-b85c-d5196864762e"),
                            Name = "Angular"
                        },
                        new
                        {
                            Id = new Guid("241fd9c6-50e0-4d8c-90ee-a295e58ec9ba"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4073),
                            CategoryId = new Guid("2fb2c391-0bc6-40a9-b85c-d5196864762e"),
                            Name = "React JS"
                        },
                        new
                        {
                            Id = new Guid("09b8f8e0-d431-4118-a2d4-a9343cf10033"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4077),
                            CategoryId = new Guid("2fb2c391-0bc6-40a9-b85c-d5196864762e"),
                            Name = "JQuery"
                        },
                        new
                        {
                            Id = new Guid("933e4168-7b24-4045-b144-5297a4daf851"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4079),
                            CategoryId = new Guid("5e7dcdbc-bdea-4805-b454-a8761823e1c9"),
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("392012d0-c131-4377-ac84-b2362836fb27"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4098),
                            CategoryId = new Guid("5e7dcdbc-bdea-4805-b454-a8761823e1c9"),
                            Name = "CSharp"
                        },
                        new
                        {
                            Id = new Guid("6cb033f9-f405-44f4-b262-2cb393004309"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4101),
                            CategoryId = new Guid("5e7dcdbc-bdea-4805-b454-a8761823e1c9"),
                            Name = "VB.NET"
                        },
                        new
                        {
                            Id = new Guid("cd037d12-7feb-46fd-bf24-2489080fb39b"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4104),
                            CategoryId = new Guid("c6f9b020-bebf-4f5a-b880-201e12ab6b26"),
                            Name = "AWS"
                        },
                        new
                        {
                            Id = new Guid("e398c01e-b30d-4aea-9bf3-85a0d7f7ff9a"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4107),
                            CategoryId = new Guid("c6f9b020-bebf-4f5a-b880-201e12ab6b26"),
                            Name = "Azure"
                        },
                        new
                        {
                            Id = new Guid("3c27b4ee-3273-41a5-a8e8-33afe6690d54"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4110),
                            CategoryId = new Guid("c6f9b020-bebf-4f5a-b880-201e12ab6b26"),
                            Name = "Terraform"
                        },
                        new
                        {
                            Id = new Guid("08e5a731-c969-488c-8526-1acb2ee27254"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4113),
                            CategoryId = new Guid("5cce7a1e-34ae-4f2b-ab0b-415519a8b908"),
                            Name = "Apex"
                        },
                        new
                        {
                            Id = new Guid("fea067f2-a2c8-49b3-8746-38c1b184eced"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4116),
                            CategoryId = new Guid("5cce7a1e-34ae-4f2b-ab0b-415519a8b908"),
                            Name = "MS Dynamics CRM"
                        },
                        new
                        {
                            Id = new Guid("cdc6d211-4822-46b6-a31b-a859d4a77cea"),
                            AddedOn = new DateTime(2023, 6, 20, 6, 51, 2, 205, DateTimeKind.Utc).AddTicks(4119),
                            CategoryId = new Guid("5cce7a1e-34ae-4f2b-ab0b-415519a8b908"),
                            Name = "SAP CRM"
                        });
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("TEXT");

                    b.Property<int>("OperationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Admin@ayi.com",
                            OperationId = 1,
                            Password = "AQAAAAEAACcQAAAAEK7fK9rklmNwB8J395U3LgJhevQEwGd/RazdOjguuNDbCnNIFoP9V8fq5hxckoPQew==",
                            RoleId = 1,
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Skill", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.User", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Contracts.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
